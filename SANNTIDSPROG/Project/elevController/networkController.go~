//need to include message.go
package elevController

import (
	"encoding/json"
	"fmt"
	"net"
	"os"
	"strconv"
	"strings"
	"time"
)

const (
	PINGPORT    int = 34014
	SUPDATEPORT int = 33014
	MUPDATEPORT int = 35014
)

type Elevator_System struct {
	selfID    int
	selfIP    string
	elevators map[int]*Elevator //elevator declared in FSM
	//elevator_orders [10]int
	master    int
	masterIP  string
	timestamp int
}

type Message struct {
	destinationFloor int
	currentFloor     int
	ID               int
	timestamp        int
	InternalOrders   [10]Button
	master           bool
	masterIP         string
}

func Initialize_elev_system() Elevator_System {
	var e_system Elevator_System
	e_system.elevators = make(map[int]*Elevator)
	addr, _ := net.InterfaceAddrs()
	tempVar := addr[1]
	e_system.timestamp = 1
	ip := tempVar.String()
	e_system.selfIP = ip[0:15]
	e_system.selfID = int(addr[1].String()[12]-'0')*100 + int(addr[1].String()[13]-'0')*10 + int(addr[1].String()[14]-'0') //this will work for IP-addresses of format ###.###.###.###, but not with only for ###.###.###.##/
	e_system.elevators[e_system.selfID] = new(Elevator)
	Set_master(&e_system)

	//Checking Elev_system variables
	fmt.Println("Controlling e_systems variables")
	fmt.Println("Master is :" + strconv.Itoa(e_system.master))
	fmt.Printf("Self ID is : %d \n", e_system.selfID)
	fmt.Printf("Timestamp is : %d \n", e_system.timestamp)
	fmt.Printf("MasterIP is :" + e_system.masterIP)

	return e_system
}

func Is_elev_master(e_system Elevator_System) bool {
	isMaster := false
	if e_system.selfID == e_system.master {
		isMaster = true
	}
	return isMaster
}

func MessageSetter(Broadcast_Message_Chan chan Message, e_system Elevator_System, e *Elevator) {
	for {
		var msg Message
		msg.destinationFloor = e.DestinationFloor
		msg.currentFloor = e.CurrentFloor
		msg.ID = e_system.selfID
		msg.masterIP = e_system.masterIP
		msg.InternalOrders = e_system.elevators[e_system.selfID].InternalOrders
		//fmt.Println(msg.ID)
		if e_system.selfID == e_system.master {
			msg.master = true
		} else {
			msg.master = false
		}
		Broadcast_Message_Chan <- msg
	}

}

func Message_Compiler_Master(msgFromSlave Message, e_system *Elevator_System) {
	//fmt.Println("Started compiling message")
	if msgFromSlave.timestamp == e_system.timestamp {
		e_system.elevators[msgFromSlave.ID].InternalOrders = msgFromSlave.InternalOrders
	}
}

func Remove_elev(ID int, e *Elevator_System) {
	delete(e.elevators, ID)
	fmt.Println("Elevator ", ID, " removed from network")
	Set_master(e)
}

func Set_master(e_system *Elevator_System) {
	// Checking which elevator has the highest IP to determine who is the master
	max := 0
	for i, _ := range e_system.elevators {
		if max < i {
			max = i

		}
	}
	e_system.master = max
	e_system.timestamp = 1
	var tempIP string = e_system.selfIP[0:12]
	e_system.masterIP = tempIP + strconv.Itoa(e_system.master)
	fmt.Println("new master is", e_system.master)
}

func Int_Timer_Chan(Timer_Chan chan int, n int) {
	timer := time.NewTimer(time.Millisecond * time.Duration(n))
	<-timer.C
	//fmt.Println("Timer timeout")
	Timer_Chan <- 1
}

func String_Timer_Chan(Timer_Chan chan string, n int) {
	timer := time.NewTimer(time.Millisecond * time.Duration(n))
	<-timer.C
	//fmt.Println("Timer timeout")
	Timer_Chan <- "1"
}

/* A Simple function to verify error */
func CheckError(err error) {
	if err != nil {
		fmt.Println("Error: ", err)
		os.Exit(0)
	}
}

func UDPListenForPing(listenPort int, e_system Elevator_System, From_Master_ReqSys_Chan chan int) {

	/* For testing: sett addresse lik ip#255:30000*/
	//ServerAddr, err := net.ResolveUDPAddr("udp", ":40000")
	ServerAddr, err := net.ResolveUDPAddr("udp", ":"+strconv.Itoa(listenPort))
	CheckError(err)

	/* Now listen at selected port */
	ServerConn, err := net.ListenUDP("udp", ServerAddr)
	CheckError(err)
	defer ServerConn.Close()

	buffer := make([]byte, 1024)
	trimmed_buffer := make([]byte, 1)
	for { // what if the elevators crashes and the slave becomes the master
		n, addr, err := ServerConn.ReadFromUDP(buffer)
		//fmt.Printf("\naddr: %d", addr.String())
		//fmt.Printf("\ne_system.masterIP: %d", e_system.masterIP)
		if strings.Split(addr.String(), ":")[0] == e_system.masterIP {
			//fmt.Println("hei")
			trimmed_buffer = buffer[0:n]
			i := string(trimmed_buffer)
			//fmt.Println("i:", i, "  i == \"1\":", i == "1")
			if i == "1" {
				fmt.Println("\nPing received ", i, " from ", addr)
				CheckError(err)

				//err = json.Unmarshal(trimmed_buffer, &received_message)
				From_Master_ReqSys_Chan <- 1
				time.Sleep(time.Millisecond * 2)
			}
		}
	}
}

func UDPListenForUpdateMaster(listenPort int, infoRec chan Message) {

	/* For testing: sett addresse lik ip#255:30000*/
	//ServerAddr, err := net.ResolveUDPAddr("udp", ":40000")
	ServerAddr, err := net.ResolveUDPAddr("udp", ":"+strconv.Itoa(listenPort))
	CheckError(err)

	/* Now listen at selected port */
	ServerConn, err := net.ListenUDP("udp", ServerAddr)
	CheckError(err)
	defer ServerConn.Close()

	var received_message Message

	//var storageChannel := make(chan Message)
	buffer := make([]byte, 1024)
	trimmed_buffer := make([]byte, 1)
	for {
		n, _, err := ServerConn.ReadFromUDP(buffer)
		trimmed_buffer = buffer[0:n]
		//fmt.Println("Received ", string(buffer[0:n]), " from ", addr)
		CheckError(err)

		err = json.Unmarshal(trimmed_buffer, &received_message)
		CheckError(err)

		//storageChannel <- received_message
		infoRec <- received_message
		time.Sleep(time.Millisecond * 50)
	}

}

func UDPListenForUpdateSlave(listenPort int, e_system Elevator_System, From_Master_NewUpdate_Chan chan Elevator_System) {

	//For testing: sett addresse lik ip#255:30000
	//ServerAddr, err := net.ResolveUDPAddr("udp", ":40000")
	ServerAddr, err := net.ResolveUDPAddr("udp", ":"+strconv.Itoa(listenPort))
	CheckError(err)

	// Now listen at selected port
	ServerConn, err := net.ListenUDP("udp", ServerAddr)
	CheckError(err)
	defer ServerConn.Close()

	var received_e_system Elevator_System

	buffer := make([]byte, 1024)
	trimmed_buffer := make([]byte, 1)

	for { // what if the elevators crashes and the slave becomes the master
		n, addr, err := ServerConn.ReadFromUDP(buffer)
		if addr.String() == e_system.masterIP {
			trimmed_buffer = buffer[0:n]
			fmt.Println("Received ", string(buffer[0:n]), " from ", addr)
			CheckError(err)
			err = json.Unmarshal(trimmed_buffer, &received_e_system)
			CheckError(err)
			From_Master_NewUpdate_Chan <- received_e_system
		}
	}
}

//need to include message-sending
//if we want to send Elevator_System, we need to change the hierarchy
/*
func UDPSend(transmitPort int,broadcastMessage chan Message,broadcastElevator_System chan broadcastElevator_System) {
	/* Dial up UDP */
/*isMaster:= false
for{
	select{
		case msg:= <- broadcastMessage:
			isMaster=false	//only slaves broadcast Messages
		case elev_system:=<-broadcastElevator_System:
			isMaster=true //only the master broadcast Elevator Systems
	}
	if (isMaster){
		BroadcastAddr, err := net.ResolveUDPAddr("udp", "255.255.255.255:"+strconv.Itoa(transmitPort))
		CheckError(err)

		/* Create a connection to the server */
/*Conn, err := net.DialUDP("udp", nil, BroadcastAddr)
CheckError(err)

fmt.Println("This is the master")
defer Conn.Close()

//msg.Timestamp = msg.Timestamp+1
/* Loads the buffer with the message in json-format */
/*buf,err := json.Marshal(elev_system)
CheckError(err)

/* Sends the message */
/*Conn.Write(buf)
/* Uses sleep as a Timer for how long we will wait for the Slave to receive and process new orders*/
/*time.Sleep(time.Second * 5)

}else{
	 //Send more messages if problems
		MasterAddr, err := net.ResolveUDPAddr("udp", msg.MasterIP+"."strconv.Itoa(transmitPort))
		CheckError(err)

		/* Create a connection to the server */
/*Conn, err := net.DialUDP("udp", nil, MasterAddr)
CheckError(err)

fmt.Println("This is a slave")
defer Conn.Close()
msg.Timestamp = broadcastElevator_System.Timestamp

/* Loads the buffer with the message in json-format */
/*buf,err := json.Marshal(msg)
				CheckError(err)

				Conn.Write(buf)

			}

		}

	}

}*/

func UDPSendReqToSlaves(transmitPort int, ping string) {
	BroadcastAddr, err := net.ResolveUDPAddr("udp", "255.255.255.255:"+strconv.Itoa(transmitPort))
	CheckError(err)

	/* Create a connection to the server */
	Conn, err := net.DialUDP("udp", nil, BroadcastAddr)
	CheckError(err)

	//fmt.Println("This is the master")
	defer Conn.Close()

	/* Loads the buffer with the message in json-format */
	//buf, err := json.Marshal(ping)
	//CheckError(err)

	/* Sends the message */
	Conn.Write([]byte(ping))

}

func UDPSendSysInfoToSlaves(transmitPort int, reworkedSystem Elevator_System) {
	e_system := reworkedSystem
	BroadcastAddr, err := net.ResolveUDPAddr("udp", "255.255.255.255:"+strconv.Itoa(transmitPort))
	CheckError(err)

	/* Create a connection to the server */
	Conn, err := net.DialUDP("udp", nil, BroadcastAddr)
	CheckError(err)

	//fmt.Println("This is the master")
	defer Conn.Close()

	/* Loads the buffer with the message in json-format */
	buf, err := json.Marshal(e_system)
	CheckError(err)

	/* Sends the message */
	Conn.Write(buf)

}

func UDPSendToMaster(transmitPort int, broadcastMessage_Chan chan Message) {

	msg := <-broadcastMessage_Chan
	MasterAddr, err := net.ResolveUDPAddr("udp", msg.masterIP+":"+strconv.Itoa(transmitPort))
	CheckError(err)

	/* Create a connection to the server */
	Conn, err := net.DialUDP("udp", nil, MasterAddr)
	CheckError(err)

	//fmt.Println("This is a slave")
	defer Conn.Close()
	//msg.timestamp = broadcastMessage.timestamp

	/* Loads the buffer with the message in json-format */
	buf, err := json.Marshal(msg)
	CheckError(err)

	Conn.Write(buf)
}

func CreateMessage() Message { //NBNB!!STRICTLY FOR TESTING PURPOSES
	msg := Message{destinationFloor: 1, currentFloor: 1, ID: 121, timestamp: 1, master: false}
	return msg
}
